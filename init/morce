#!/bin/sh /etc/rc.common

START=99
STOP=10

USE_PROCD=1

if [ -z "$(type -t extra_command)" ]; then
    # Compatibility with OpenWrt older than 19.07
    EXTRA_COMMANDS="update_rules aggregate"
else
    extra_command "update_rules" "Fetch new rules from Emerging threads"
    extra_command "aggregate" "Aggregate alerts stored in database"
fi

config_load morce
config_get ALERTS_DB setup live_database "/var/run/morce/morce-alerts.sqlite"
config_get COLD_DB   setup cold_database "/srv/morce-alerts.sqlite"
RULES_DIR="/var/lib/morce-rules"

# Rulesets we pull from Emerging Threads
config_get ET_RULES et rules "
    activex
    attack_response
    botcc
    compromised
    current_events
    dos
    dshield
    exploit
    malware
    mobile_malware
    trojan
    worm"

die() {
    echo "$1" >&2
    return 1
}

update_rules() {
    mkdir -p "$RULES_DIR"
    [ -d "$RULES_DIR" -a -O "$RULES_DIR" -a -G "$RULES_DIR" ] || die "Can't create a rules directory"
    cd "$RULES_DIR"

    # Check for updated Emerging Threads rules
    local old_version="$(cat et-version.txt 2> /dev/null)"
    wget -O et-version.txt https://rules.emergingthreats.net/open/snort-2.9.0/version.txt || die "Can't get version of ET rules"
    if [ "$old_version" != "$(cat et-version.txt)" ]; then
        for ruleset in $ET_RULES; do
            wget -O "emerging-${ruleset}.v2.rules" "https://rules.emergingthreats.net/open/snort-2.9.0/rules/emerging-${ruleset}.rules" || \
                die "Can't download 'emerging-${ruleset}.rules' ruleset!"
            snort2lua -c "emerging-${ruleset}.v2.rules" -r "emerging-${ruleset}.v3.rules"
            # Drop comments and disabled rules to reduce size
            sed -i '/^#/ d' "emerging-${ruleset}.v3.rules"
            # Make sure we have some rules after conversion
            [ -n "$(head -n 10 "emerging-${ruleset}.v3.rules")" ] || echo "Converted rules from ${ruleset} are almost empty" >&2
            rm "emerging-${ruleset}.v2.rules"
            cat "emerging-${ruleset}.v3.rules"
            rm "emerging-${ruleset}.v3.rules"
        done > emerging-all.rules
    fi
    [ -n "$(head -n 10 "emerging-all.rules")" ] || die "Downloaded emerging ruleset is empty"

    # Check for updated Snort Community rules
    old_version="$(cat talos-version.txt 2> /dev/null)"
    # Get sha256 sum of all advisories links from advisories rss feed
    wget -O - https://www.snort.org/vrt/advisories.xml | tr '<' '\n' | sed -n 's|.*"\(https://snort.org/advisories/talos-rules[^"]*\)".*|\1|gp' | sha256sum > talos-version.txt \
        || die "Can't get Snort rules version"
    if [ "$old_version" != "$(cat talos-version.txt)" ]; then
        wget -O - https://www.snort.org/downloads/community/snort3-community-rules.tar.gz \
            | tar -xczf - snort3-community-rules/snort3-community.rules \
            | grep -v '^#' > snort3-community.rules || die "Can't download Snort ruleset"
    fi

    # Merge and prepare everything
    cat snort3-community.rules emerging-all.rules > all.rules
    cat > morce_rules.lua <<EOF
ips = {
    enable_builtin_rules = true,
    include = '$RULES_DIR/all.rules'",
    variables = default_variables
}
suppress = {
}
EOF

    # Restart service if appropriate
    local old_version="$(cat version.txt)"
    cat morce_rules.lua et-version.txt talos-version.txt | sha256sum > version.txt
    [ "$old_version" != "$(cat version.txt)" ] || return 0
    [ "$1" == "no-restart" ] && return 0
    procd_send_signal morce '*' SIGHUP
}

aggregate() {
    [ -f "$ALERTS_DB" ] || return 0

    set -e
    # Timestamp week ago
    w_ts="$(($(date +%s) - 3600 * 24 * 7))"
    # Timestamp 5 weeks ago
    m_ts="$(($(date +%s) - 3600 * 24 * 7 * 5))"

    # Create aggregated table
    # 'aggregation' column can contain:
    # - H - hourly aggregated
    # - D - daily aggregated
    sqlite3 "$ALERTS_DB" <<EOF
        CREATE TABLE IF NOT EXISTS aggregated_alerts (
              time TIMESTAMP,
              aggregation CHAR(1),
              count INTEGER,
              mac VARCHAR(20) default "",
              alert_id VARCHAR(20) default "",
              dst_ip VARCHAR(50) default "",
              dst_port INTEGER default 0
         );

        # Anything older then week we aggregate per hour
        INSERT INTO aggregated_alerts(
            time, aggregation, count, mac, alert_id, dst_ip, dst_port
          ) SELECT
                 strftime("%Y-%m-%d %H:00:00", time),
                 "H",
                 count(time),
                 mac,
                 alert_id,
                 dst_ip,
                 dst_port 
             FROM live_alerts WHERE
                 time < DATETIME($w_ts, "unixepoch")
             GROUP BY
                 strftime("%Y-%m-%d %H:00:00", time),
                 mac,
                 alert_id,
                 dst_ip,
                 dst_port;
        DELETE FROM live_alerts WHERE time < DATETIME($w_ts, "unixepoch");

        # Anything older then five weeks we aggregate per day
        INSERT INTO aggregated_alerts(
            time, aggregation, count, mac, alert_id, dst_ip, dst_port
          ) SELECT
                  strftime("%Y-%m-%d 00:00:00", time),
                  "D",
                  sum(count),
                  mac,
                  alert_id,
                  "",
                  0 
              FROM aggregated_alerts WHERE
                  time < DATETIME($m_ts, "unixepoch") AND
                  aggregation = "H"
              GROUP BY
                  strftime("%Y-%m-%d 00:00:00", time),
                  mac,
                  alert_id;
        DELETE FROM aggregated_alerts WHERE time < DATETIME($m_ts, "unixepoch") AND aggregation = "H";
        VACUUM;
EOF

    # Make persistent backup
    local cold_db_dir="$(dirname "$COLD_DB")"
    mkdir -p "$cold_db_dir"
    [ -d "$cold_db_dir" -a -O "$cold_db_dir" -a -G "$cold_db_dir" ]
    cp -p "$ALERTS_DB" "$COLD_DB"
    set +e
}

start_service() {
    [ "$1" = "no-update" ] || update_rules no-restart || return 1
    local alerts_db_dir="$(dirname "$ALERTS_DB")"
    mkdir -p "$alerts_db_dir"
    [ -d "$alerts_db_dir" -a -O "$alerts_db_dir" -a -G "$alerts_db_dir" ] || die "Can't create a directory for alerts database"
    [ -r "$COLD_DB" -a "$ALERTS_DB" -nt "$COLD_DB" ] || cp "$COLD_DB" "$ALERTS_DB"
    procd_open_instance
    procd_set_param command /usr/bin/snort \
        --daq-dir /usr/lib/daq/ \
        --script-path /usr/share/morce/loggers/ \
        --include-path /etc/snort \
        -c /etc/snort/snort.lua \
        --tweaks balanced \
        --lua "include '$RULES_DIR/morce_rules.lua'" \
        -i "br-lan" \
        -A alert_morce
    procd_set_param file "$RULES_DIR"/morce_rules.lua
    procd_set_param stderr 1
    procd_set_param stdout 1
    procd_set_param reload_signal SIGHUP
    procd_set_param respawn
    procd_close_instance
}

service_stopped() {
    aggregate
}

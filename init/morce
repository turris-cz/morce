#!/bin/sh /etc/rc.common

START=99
STOP=10

USE_PROCD=1

if [ -z "$(type -t extra_command)" ]; then
    # Compatibility with OpenWrt older than 19.07
    EXTRA_COMMANDS="update_rules aggregate"
else
    extra_command "update_rules" "Fetch new rules from Emerging threads"
    extra_command "aggregate"    "Aggregate alerts stored in database"
fi

config_load morce
config_get ALERTS_DB setup live_database "/var/run/morce/morce-alerts.sqlite"
config_get COLD_DB   setup cold_database "/srv/morce-alerts.sqlite"
config_get IFACE     setup interface     "br-lan"
RULES_DIR="/var/lib/morce-rules"

# Rulesets we pull from Emerging Threads
config_get ET_RULES et rules "
    activex
    attack_response
    botcc
    compromised
    current_events
    dos
    dshield
    exploit
    malware
    mobile_malware
    trojan
    worm"

die() {
    echo "$1" >&2
    return 1
}

update_rules() (
    local do_restart="yes"
    [ "$1" != "no-restart" ] || do_restart=""

    mkdir -p "$RULES_DIR"
    [ -d "$RULES_DIR" -a -O "$RULES_DIR" -a -G "$RULES_DIR" ] || die "Can't create a rules directory"
    cd "$RULES_DIR"

    # Check for updated Emerging Threads rules
    local old_version="$(cat et-version.txt 2> /dev/null)"
    local old_ruleset="$(cat et-ruleset.txt 2> /dev/null)"
    wget -O et-version.txt https://rules.emergingthreats.net/open/snort-2.9.0/version.txt || die "Can't get version of ET rules"
    if [ "$old_version" != "$(cat et-version.txt)" ] || [ "$old_ruleset" != "$ET_RULES" ]; then
        for ruleset in $ET_RULES; do
            wget -O "emerging-${ruleset}.v2.rules" "https://rules.emergingthreats.net/open/snort-2.9.0/rules/emerging-${ruleset}.rules" || \
                die "Can't download 'emerging-${ruleset}.rules' ruleset!"
            snort2lua -c "emerging-${ruleset}.v2.rules" -r "emerging-${ruleset}.v3.rules"
            # Drop comments and disabled rules to reduce size
            sed -i '/^#/ d' "emerging-${ruleset}.v3.rules"
            # Warn if we have almost no rules after conversion
            [ -n "$(head -n 10 "emerging-${ruleset}.v3.rules")" ] || echo "Converted rules from ${ruleset} are almost empty" >&2
            rm "emerging-${ruleset}.v2.rules"
            cat "emerging-${ruleset}.v3.rules"
            rm "emerging-${ruleset}.v3.rules"
        done > emerging-all.rules
        echo "$ET_RULES" > et-ruleset.txt
    fi
    [ -n "$(head -n 10 "emerging-all.rules")" ] || die "Downloaded emerging ruleset is empty"

    # Check for updated Snort Community rules
    old_version="$(cat talos-version.txt 2> /dev/null)"
    # Get sha256 sum of all advisories links from advisories rss feed
    wget -O - https://www.snort.org/vrt/advisories.xml | tr '<' '\n' | sed -n 's|.*"\(https://snort.org/advisories/talos-rules[^"]*\)".*|\1|gp' | sha256sum > talos-version.txt \
        || die "Can't get Snort rules version"
    if [ "$old_version" != "$(cat talos-version.txt)" ]; then
        wget -O - https://www.snort.org/downloads/community/snort3-community-rules.tar.gz \
            | tar -xOzf - snort3-community-rules/snort3-community.rules \
            | grep -v '^#' > snort3-community.rules || die "Can't download Snort ruleset"
    fi

    # Merge and prepare everything
    cat snort3-community.rules emerging-all.rules > all.rules
    cat > morce_rules.lua <<EOF
ips = {
    enable_builtin_rules = false,
    include = '$RULES_DIR/all.rules',
    variables = default_variables
}
suppress = {
}
EOF

    # Restart service if appropriate
    local old_version="$(cat version.txt 2> /dev/null)"
    cat morce_rules.lua et-version.txt talos-version.txt | sha256sum > version.txt
    [ "$old_version" != "$(cat version.txt)" ] || return 0
    [ -z "$do_restart" ] || procd_send_signal morce '*' SIGHUP
)

aggregate() {
    [ -f "$ALERTS_DB" ] || return 0

    set -e
    # Aggregate records
    sqlite3 "$ALERTS_DB" < /usr/share/morce/aggregate.sql

    # Make persistent backup
    local cold_db_dir="$(dirname "$COLD_DB")"
    mkdir -p "$cold_db_dir"
    [ -d "$cold_db_dir" -a -O "$cold_db_dir" -a -G "$cold_db_dir" ]
    cp -p "$ALERTS_DB" "$COLD_DB"
    set +e
}

start_service() {
    # If running do not proceed with rules updates and DB copies just to fail later
    if procd_running morce; then
        return 0
    fi
    procd_open_instance
    update_rules no-restart || return 1
    local alerts_db_dir="$(dirname "$ALERTS_DB")"
    mkdir -p "$alerts_db_dir"
    [ -d "$alerts_db_dir" -a -O "$alerts_db_dir" -a -G "$alerts_db_dir" ] || die "Can't create a directory for alerts database"
    [ \! -r "$COLD_DB" ] || [ "$ALERTS_DB" -nt "$COLD_DB" ] || cp "$COLD_DB" "$ALERTS_DB"
    procd_set_param command /usr/bin/snort \
        --daq-dir /usr/lib/daq/ \
        --script-path /usr/share/morce/loggers/ \
        --include-path /etc/snort \
        -c /etc/snort/snort.lua \
        --tweaks balanced \
        --lua "include '$RULES_DIR/morce_rules.lua'" \
        -i "$IFACE" \
        -A alert_morce
    procd_set_param file "$RULES_DIR"/morce_rules.lua
    procd_set_param stderr 1
    procd_set_param stdout 1
    procd_add_reload_trigger "morce"
    procd_set_param respawn
    procd_close_instance
}

service_stopped() {
    aggregate
}

reload_service() {
    # The only thing that might require reload is changing the ruleset
    update_rules
}
